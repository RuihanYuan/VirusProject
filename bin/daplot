#! /usr/bin/env python
# daplot.py
# creates a combined depth and annotation plot from a depth file and a gff3 file


import argparse
import os
import yaml

from BCBio import GFF
from dna_features_viewer import GraphicFeature, GraphicRecord
import seaborn as sns
from matplotlib import pyplot as plt, lines


__version__ = "1.2.0"  # 2024/10/13 HB+3


def parse_depth(depth_input):
	print(f"Parsing depth file {depth_input}")
	depth_list = []
	genome_id_stored = None
	with open(depth_input) as depth_object:
		for row in depth_object:
			genome_id, position, depth_count = row.split()
			if genome_id_stored is None:
				genome_id_stored = genome_id
			elif genome_id != genome_id_stored:
				raise Exception('Error: 1 genome/contig expected')
			position = int(position) - 1
			depth_count = int(depth_count)
			if position >= len(depth_list):
				depth_list.extend([0] * (position - len(depth_list) + 1))
			depth_list[position] = depth_count
	print(f"Parsed depth file {depth_input}")
	return depth_list


def plot_depth(ax, depth_list, is_normalize, depth_cut_off):
    y_label = "Normalized Depth" if is_normalize else "Depth"
    if is_normalize:
        depth_list = [xx / max(depth_list) for xx in depth_list]
    sns.set_theme(color_codes=True)
    sns.lineplot(x=range(len(depth_list)), y=depth_list, ax=ax)
    ax.set(xlabel='Genome Position (bp)', ylabel=y_label)
    if not is_normalize:
        ax.add_line(lines.Line2D([0, len(depth_list) + 1], [depth_cut_off], color="r"))


def load_color_settings(yml_file):
	with open(yml_file, 'r') as file:
		settings = yaml.safe_load(file)
	print(f"Color mappings loaded from {yml_file}")
	return settings['color_mapping'], settings['default_color']


def parse_gff3(gff_input: str, color_mapping, default_color):
	graphic_features = []
	print(f"Parsing GFF file {gff_input}")

	with open(gff_input, "r") as gff_infile:
		for gff_record in GFF.parse(gff_infile):
			for feature in gff_record.features:
				if feature.type == "CDS":
					product = feature.qualifiers.get('product', [''])[0]
					color = color_mapping.get(product, default_color)
					graphic_feature = GraphicFeature(
						start  = int(feature.location.start),
						end    = int(feature.location.end),
						strand = feature.location.strand,
						color  = color,
						label  = product
					)
					graphic_features.append(graphic_feature)

	print(f"Parsed GFF file {gff_input}")
	return GraphicRecord(sequence_length=len(gff_record.seq), features=graphic_features)


def main():
	"""argparse statements"""
	parser = argparse.ArgumentParser(description="Generate combined depth and annotation plots from a depth file and a GFF file.",
									 formatter_class=argparse.RawTextHelpFormatter)
	parser.add_argument("-id", "--input_depth",
						type=str,
						required=True,
						help='path to the input depth file')
	parser.add_argument("-ig", "--input_gff",
						type=str,
						required=True,
						help='path to the input GFF file')
	parser.add_argument("-o", "--output",
						type=str,
						required=True,
						help='path to save the output SVG file')
	parser.add_argument("-n", "--normalize",
						action="store_true",
						help=('normalize the depth values\n'
							  'default = False'))
	parser.add_argument("-c", "--cutoff",
						type=int,
						default=20,
						help=('depth cutoff value\n'
							  'default = 20'))
	parser.add_argument("-y", "--color_settings",
						type=str,
						help=('path to the color settings YAML file\n'
							  'defaults to program settings if left blank'))
	parser.add_argument("-v", "--version",
						action='version',
						version=f'%(prog)s {__version__}')

	args = parser.parse_args()

	"""input checks"""
	if not os.path.exists(args.input_depth):
		raise Exception(f'Error: Input depth file {args.input_depth} does not exist')
	if not os.path.exists(args.input_gff):
		raise Exception(f'Error: Input GFF file {args.input_gff} does not exist')
	
	if not args.input_gff.endswith('.gff3'):
		raise Exception(f'Error: Input GFF file {args.input_gff} type error.\nFile type "gff3" expected')

	"""color settings"""
	color_mapping = {
		"P0 protein": "#da9100",
		"RNA-dependent RNA polymerase": "#009B77",
		"P1 protein": "#4D4DFF",
		"coat protein": "#E40046",
		"aphid transmission protein": "#FFE900",
		# Add more mappings as needed
	}

	default_color = "#D9D9D6"

	# Load color settings from the YAML file if provided
	if args.color_settings:
		color_mapping, default_color = load_color_settings(args.color_settings)

	"""parsing input"""
	depth_list = parse_depth(args.input_depth)
	graphic_record = parse_gff3(args.input_gff, color_mapping, default_color)

	"""plotting"""
	fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(6, 3.5), sharex=True, gridspec_kw={"height_ratios": [3, 1]})
	graphic_record.plot(ax=ax1)
	plot_depth(ax2, depth_list, is_normalize=args.normalize, depth_cut_off=args.cutoff)
	plt.tight_layout()
	print(f"Generating depth-annotation combined plot as {args.output}")
	fig.savefig(args.output, format='svg')

	print("----PLOT GENERATED----")


if __name__ == '__main__':
	main()
