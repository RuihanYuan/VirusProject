#! /usr/bin/env python
# aplot.py
# creates a color-coded annotation plot from a gff3 file


import argparse
import os
import yaml

from BCBio import GFF
from dna_features_viewer import GraphicFeature, GraphicRecord


__version__ = "1.2.0"  # 2024/10/13 HB+3


def parse_gff3(gff_input: str, color_mapping, default_color):
	graphic_features = []
	print(f"Parsing GFF file {gff_input}")
	with open(gff_input, "r") as gff_infile:
		for gff_record in GFF.parse(gff_infile):
			for feature in gff_record.features:
				if feature.type == "CDS":
					product = feature.qualifiers.get('product', [''])[0]
					color = color_mapping.get(product, default_color)
					graphic_feature = GraphicFeature(
						start  = int(feature.location.start),
						end    = int(feature.location.end),
						strand = feature.location.strand,
						color  = color,
						label  = product
					)
					graphic_features.append(graphic_feature)
	print(f"Parsed GFF file {gff_input}")
	return GraphicRecord(sequence_length=len(gff_record.seq), features=graphic_features)


def load_color_settings(yml_file):
	"""
	To make changes to the annotation colors please visit the color_setting.yml
	file in the bin folder and pass it in using the -c argument
	"""
	with open(yml_file, 'r') as file:
		settings = yaml.safe_load(file)
	return settings['color_mapping'], settings['default_color']


def plot_annotation(graphic_record: GraphicRecord, output_path):
	print(f"Generating annotation plot as {output_path}")
	ax, _ = graphic_record.plot(figure_width=10)
	ax.figure.tight_layout()
	ax.figure.savefig(output_path, format='svg')
	print("----PLOT GENERATED----")
	return None


def main():
	"""argparse statements"""
	parser = argparse.ArgumentParser(description="Generate annotation plots from GFF files.",
									 formatter_class=argparse.RawTextHelpFormatter)
	parser.add_argument("-i", "--input",
						type=str,
						required=True,
						help='path to the input GFF file')
	parser.add_argument("-o", "--output",
						type=str,
						required=True,
						help='path to save the output SVG file')
	parser.add_argument("-y", "--color_settings",
						type=str,
						help=('path to the color settings YAML file\n'
							  'defaults to program settings if left blank'))
	parser.add_argument("-v", "--version",
						action='version',
						version=f'%(prog)s {__version__}')

	args = parser.parse_args()

	"""input checks"""
	if not os.path.exists(args.input):
		raise Exception(f'Error: Input file {args.input} does not exist')

	if not args.input.endswith('.gff3'):
		raise Exception(f'Error: Input GFF file {args.input_gff} type error.\nFile type "gff3" expected')

	"""color settings"""
	color_mapping = {
		"P0 protein": "#da9100",
		"RNA-dependent RNA polymerase": "#009B77",
		"P1 protein": "#4D4DFF",
		"coat protein": "#E40046",
		"aphid transmission protein": "#FFE900",
		# Add more mappings as needed
	}

	default_color = "#D9D9D6"

	# Load color settings from the YAML file if provided
	if args.color_settings:
		color_mapping, default_color = load_color_settings(args.color_settings)

	"""parsing input"""
	graphic_record = parse_gff3(args.input, color_mapping, default_color)

	"""plotting"""
	# Plot the graphic record
	plot_annotation(graphic_record, args.output)


if __name__ == '__main__':
	main()
