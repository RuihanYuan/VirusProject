#! /usr/bin/env python
# aplot.py
# creates a color-coded annotation plot from a gff file


from BCBio import GFF
from dna_features_viewer import GraphicFeature, GraphicRecord
import argparse
import yaml


__version__ = "1.1.0"  # 2024/10/11 HB+1


def load_color_settings(yml_file):
    '''
    To make changes to the annotation colors please visit the color_setting.yml 
    file in the bin folder and pass it in using the -c argument
    '''
    with open(yml_file, 'r') as file:
        settings = yaml.safe_load(file)
    return settings['color_mapping'], settings['default_color']


def main():
    parser = argparse.ArgumentParser(description="Generate annotation plots from GFF files.",
                                     formatter_class=argparse.RawTextHelpFormatter)
    parser.add_argument("-i", "--input",
                        type=str,
                        required=True,
                        help='path to the input GFF file')
    parser.add_argument("-o", "--output",
                        type=str,
                        required=True,
                        help='path to save the output SVG file')
    parser.add_argument("-y", "--color_settings",
                        type=str,
                        help=('path to the color settings YAML file\n'
                              'defaults to program settings if left blank'))
    parser.add_argument("-v", "--version",
                        action='version',
                        version=f'%(prog)s {__version__}')

    args = parser.parse_args()

    color_mapping = {
        "P0 protein": "lightpink",
        "RNA-dependent RNA polymerase": "magenta",
        "P1 protein": "lightgreen",
        "coat protein": "yellow",
        "aphid transmission protein": "orange",
        # Add more mappings as needed
    }

    default_color = "grey"

    # Load color settings from the YAML file if provided
    if args.color_settings:
        color_mapping, default_color = load_color_settings(args.color_settings)

    # Initialize empty list
    graphic_features = []

    print(f"Parsing GFF file {args.input}")
    # Parse the GFF3 file, create and add GraphicFeature objects to list
    with open(args.input, "r") as gff_input:
        for gff_record in GFF.parse(gff_input):
            for feature in gff_record.features:
                if feature.type == "CDS":
                    product = feature.qualifiers.get('product', [''])[0]
                    color = color_mapping.get(product, default_color)
                    graphic_feature = GraphicFeature(
                        start=int(feature.location.start),
                        end=int(feature.location.end),
                        strand=feature.location.strand,
                        color=color,
                        label=product
                    )
                    graphic_features.append(graphic_feature)
    print(f"Parsed GFF file {args.input}")

    # Create a GraphicRecord outside the loop, after all features have been added to the list
    graphic_record = GraphicRecord(sequence_length=len(gff_record.seq), features=graphic_features)

    # Plot the graphic record
    ax, _ = graphic_record.plot(figure_width=10)
    ax.figure.tight_layout()
    print(f"Generating annotation plot as {args.output}")
    # Save the figure to a svg file
    ax.figure.savefig(args.output, format='svg')

    print("----PLOT GENERATED----")


if __name__ == '__main__':
    main()
